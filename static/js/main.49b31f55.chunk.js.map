{"version":3,"sources":["settingsicon.svg","icon/instagram-sketched.svg","icon/almas.png","icon/pin.svg","icon/phone.svg","fonts/IRANSans.ttf","fonts/FilsonSoft-Medium.otf","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","src","almaas","alt","style","fontSize","setting","instagram","marginLeft","marginTop","href","target","rel","pin","phone","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,0C,kBCA3CD,EAAOC,QAAU,IAA0B,gD,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,qDCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,+C,sNCmE5BC,MA1Df,WACE,OACE,yBAAKC,UAAU,OAEb,0BAAMA,UAAU,cACd,yBAAKA,UAAU,eACb,yBAAKC,IAAKC,IAAQC,IAAI,UAExB,yBAAKH,UAAU,cACb,gEAGA,uBAAGI,MAAO,CAAEC,SAAU,KAAtB,oKAGA,uBAAGD,MAAO,CAAEC,SAAU,KAAtB,iQAIA,yBAAKL,UAAU,QACb,yBAAKC,IAAKK,IAASN,UAAU,WAAWG,IAAI,SAC5C,yBAAKF,IAAKK,IAASN,UAAU,YAAYG,IAAI,WAGjD,yBAAKH,UAAU,gBACb,yBAAKC,IAAKM,IAAWP,UAAU,cAAeG,IAAI,OAAOC,MAAO,CAAEI,WAAY,MAAOC,UAAW,WAChG,uBACEL,MAAO,CAAEK,UAAW,WACpBT,UAAU,iBACVU,KAAK,wCACLC,OAAO,SACPC,IAAI,uBALN,eAQA,uBACEF,KAAK,GACLN,MAAO,CAAEI,WAAY,OAAQC,UAAW,WACxCT,UAAU,kBAHZ,2IAKA,yBAAKC,IAAKY,IAAKV,IAAI,OAAOH,UAAU,cAAcI,MAAO,CAAEI,WAAY,QAASC,UAAW,WAE3F,uBACCC,KAAK,GACJN,MAAO,CAAEK,UAAW,UAAYD,WAAY,QAC5CR,UAAU,kBAHZ,eAKA,yBAAKC,IAAKa,IAAOX,IAAI,OAAOH,UAAU,cAAcI,MAAO,CAAEK,UAAW,eC3C9DM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.49b31f55.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/settingsicon.7ba0494b.svg\";","module.exports = __webpack_public_path__ + \"static/media/instagram-sketched.bdc5043e.svg\";","module.exports = __webpack_public_path__ + \"static/media/almas.45900fba.png\";","module.exports = __webpack_public_path__ + \"static/media/pin.adc5c2ac.svg\";","module.exports = __webpack_public_path__ + \"static/media/phone.240456b7.svg\";","module.exports = __webpack_public_path__ + \"static/media/IRANSans.97b4acac.ttf\";","module.exports = __webpack_public_path__ + \"static/media/FilsonSoft-Medium.7c9217f4.otf\";","import React from 'react';\r\nimport setting from './settingsicon.svg';\r\nimport instagram from './icon/instagram-sketched.svg';\r\nimport almaas from './icon/almas.png';\r\nimport pin from './icon/pin.svg';\r\nimport phone from './icon/phone.svg';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <body className=\"App-header\">\r\n        <div className=\"Almaas-logo\">\r\n          <img src={almaas} alt=\"logo\" />\r\n        </div>\r\n        <div className=\"Body-style\">\r\n          <p>\r\n            ...بزودی\r\n          </p>\r\n          <p style={{ fontSize: 20 }}>\r\n            گروه مشاورین املاک الماس ایران\r\n        </p>\r\n          <p style={{ fontSize: 20 }}>\r\n            مجهزترین و بروزترین دپارتمان املاک در شمال ایران\r\n        </p>\r\n\r\n          <div className=\"divs\">\r\n            <img src={setting} className=\"App-logo\" alt=\"logo\" />\r\n            <img src={setting} className=\"App-logo2\" alt=\"logo\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"Footer-style\">\r\n          <img src={instagram} className='Footer-logo'  alt=\"logo\" style={{ marginLeft: '5vw', marginTop: '9vmin'}} />\r\n          <a\r\n            style={{ marginTop: '8.5vmin' }}\r\n            className=\"Instagram-link\"\r\n            href=\"https://www.instagram.com/almaas_iran\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >almaas_iran</a>\r\n\r\n          <a\r\n            href=\"\"\r\n            style={{ marginLeft: '20vw', marginTop: '8.5vmin' }}\r\n            className=\"Instagram-link\"\r\n          >بابلسر نرسیده به دریاکنار</a>\r\n          <img src={pin} alt=\"logo\" className='Footer-logo' style={{ marginLeft: '0.2vw', marginTop: '9vmin' }} />\r\n\r\n          <a\r\n           href=\"\"\r\n            style={{ marginTop: '8.5vmin' , marginLeft: '17vw' }}\r\n            className=\"Instagram-link\"\r\n          >09113133013</a>\r\n          <img src={phone} alt=\"logo\" className='Footer-logo' style={{ marginTop: '9vmin' }} />\r\n\r\n        </div>\r\n\r\n      </body>\r\n\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './fonts/IRANSans.ttf'\r\nimport './fonts/FilsonSoft-Medium.otf'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}